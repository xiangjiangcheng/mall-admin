会话方式 [jwt|redis-token]

1.JWT Token 优缺点
优点：
>>> 无状态性：JWT是自包含的，服务器不需要在本地存储任何关于用户会话的信息。这使得系统的扩展性很好，因为服务器不需要为每个用户的会话信息进行存储和查询操作。
跨平台和跨语言支持：由于JWT是基于JSON格式的，几乎所有的编程语言都有库可以方便地生成和验证JWT。
>>> 易于传输：JWT可以通过HTTP头（如Authorization头）或者作为URL的一部分进行传输，使用起来非常灵活。
>>> 分布式友好：无需中心化存储，天然适合微服务架构。
缺点：
>>> 难以撤销：一旦JWT被签发，在有效期内很难撤销。虽然可以通过一些机制，如维护一个黑名单来解决，但这增加了额外的复杂性。
>>> 信息泄露风险：如果JWT的载荷中包含了敏感信息，并且没有进行适当的加密，可能会导致信息泄露。
>>> 数据膨胀：用户信息存储在Token中，多次传输可能增加网络开销。
>>> 权限更新延迟：用户权限变更后需重新生成Token，否则旧Token仍有效。

2.Redis Token 优缺点
优点：
>>> 易于管理和撤销：通过Redis存储Token，可以很方便地实现Token的撤销。例如，当用户注销登录或者权限发生变化时，只需要从Redis中删除对应的Token即可。
>>> 灵活存储用户信息：可以在Redis中存储各种用户相关的信息，不仅仅是身份验证信息。
>>> 完全控制会话：可实时吊销Token（直接删除Redis中的记录）。
>>> 动态权限管理：用户权限变更立即生效，无需重新登录。
缺点：
>>> 增加系统复杂度：需要维护Redis服务器，并且在验证Token时需要进行额外的Redis查询操作。这增加了系统的复杂性和潜在的性能开销，特别是在高并发场景下，Redis的性能和可用性会对整个系统产生影响。
>>> 存储成本：随着用户数量和Token数量的增加，Redis的存储需求也会增加，这可能会导致存储成本的上升。
>>> 网络开销：每次验证需访问Redis，增加延迟。
适用场景
>>> JWT Token：适用于高并发、分布式系统，如API网关。也适合需要快速验证且无需频繁撤销Token的场景，以及跨域或第三方应用集成。
>>> Redis Token：适用于需要强制用户下线或动态权限控制的系统，如后台管理系统。也适合对安全性要求极高，需实时管理Token的场景。
在实际应用中，也可以根据具体的业务需求和系统架构，将两种方案结合使用。例如，在系统的某些非关键部分使用JWT，而在关键业务中使用Redis来确保更高的安全性。